name: PyFlow CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Backend Testing & Quality
  backend-tests:
    name: 🐍 Backend Tests & Quality
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: pyflow_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 📚 Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov black isort pylint

    - name: 🔍 Code quality checks
      working-directory: ./backend
      run: |
        # Format checking
        black --check .
        isort --check-only .
        
        # Linting
        pylint app/ --errors-only

    - name: 🧪 Run tests with coverage
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/pyflow_test
        REDIS_URL: redis://localhost:6379
        ENVIRONMENT: testing
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing

    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend Testing & Quality
  frontend-tests:
    name: ⚛️ Frontend Tests & Quality
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: 📚 Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: 🔍 ESLint check
      working-directory: ./frontend
      run: npm run lint

    - name: 💅 Prettier check
      working-directory: ./frontend
      run: npm run format:check

    - name: 🔧 Type checking
      working-directory: ./frontend
      run: npm run type-check

    - name: 🧪 Run tests with coverage
      working-directory: ./frontend
      run: npm run test:ci

    - name: 🏗️ Build application
      working-directory: ./frontend
      run: npm run build

    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Security Scanning
  security:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📊 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker Build & Test
  docker-build:
    name: 🐳 Docker Build & Test
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'push'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to Docker Hub
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: 🏗️ Build and test backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: pyflow-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🏗️ Build and test frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: pyflow-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🧪 Test Docker Compose
      run: |
        docker-compose -f docker-compose.yml up -d
        sleep 30
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:3000 || exit 1
        docker-compose down

    - name: 🚀 Push to Docker Hub
      if: github.ref == 'refs/heads/main'
      run: |
        docker tag pyflow-backend:latest ${{ secrets.DOCKERHUB_USERNAME }}/pyflow-backend:latest
        docker tag pyflow-frontend:latest ${{ secrets.DOCKERHUB_USERNAME }}/pyflow-frontend:latest
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/pyflow-backend:latest
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/pyflow-frontend:latest

  # Performance Testing
  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Start services
      run: docker-compose up -d

    - name: ⏳ Wait for services
      run: sleep 60

    - name: 🏃‍♂️ Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          http://localhost:3000
        configPath: './.lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

  # Deployment (Production)
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [security, performance]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to production
      run: |
        echo "🚀 Deploying PyFlow to production..."
        # Add your deployment commands here
        # Example: kubectl apply -f k8s/
        # Example: docker-compose -f docker-compose.prod.yml up -d
        echo "✅ Deployment completed!"

  # Notification
  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security, docker-build]
    if: always()

    steps:
    - name: 📢 Notify on success
      if: ${{ needs.backend-tests.result == 'success' && needs.frontend-tests.result == 'success' }}
      run: |
        echo "✅ All checks passed! PyFlow is ready."

    - name: 📢 Notify on failure
      if: ${{ needs.backend-tests.result == 'failure' || needs.frontend-tests.result == 'failure' }}
      run: |
        echo "❌ Some checks failed. Please review the results."